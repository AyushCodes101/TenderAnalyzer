name: Production Build and Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get Git Commit Hash
      id: git-commit
      run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Get Branch Name
      id: get-branch
      run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Login to DigitalOcean Container Registry (DOCR)
      run: echo "${{ secrets.DOCR_TOKEN }}" | docker login -u doctl --password-stdin ${{ vars.DOCR_REGISTRY }}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Delete old images, repository, and trigger garbage collection
      env:
        DOCR_REGISTRY: ${{ vars.DOCR_REGISTRY }}
        DOCR_REPOSITORY: ${{ vars.DOCR_REPOSITORY }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
        DOCR_TOKEN: ${{ secrets.DOCR_TOKEN }}
      run: |
        echo "Fetching tags from DOCR..."
        curl -s -X GET \
          -H "Authorization: Bearer $DOCR_TOKEN" \
          "https://api.digitalocean.com/v2/registry/${DOCR_REGISTRY##*/}/repositories/${DOCR_REPOSITORY}/tags" > tags.json

        if jq -e '.tags' tags.json >/dev/null; then
          OLD_TAGS=$(jq -r '.tags[].tag' tags.json | grep "^${BRANCH_NAME}-" || true)
          
          if [ -n "$OLD_TAGS" ]; then
            echo "Found old tags:"
            echo "$OLD_TAGS"
            for tag in $OLD_TAGS; do
              echo "Deleting image tag: $tag"
              RESPONSE=$(curl -s -o /dev/stderr -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer $DOCR_TOKEN" \
                "https://api.digitalocean.com/v2/registry/${DOCR_REGISTRY##*/}/repositories/${DOCR_REPOSITORY}/tags/$tag")
              echo "DELETE status: $RESPONSE"
            done
          else
            echo "No old tags with prefix '${BRANCH_NAME}-' found."
          fi
        else
          echo "No tags found or failed to fetch tags:"
          cat tags.json
        fi

        echo "Deleting the repository: $DOCR_REPOSITORY"
        DELETE_REPO_RESPONSE=$(curl -s -o /dev/stderr -w "%{http_code}" -X DELETE \
          -H "Authorization: Bearer $DOCR_TOKEN" \
          "https://api.digitalocean.com/v2/registry/${DOCR_REGISTRY##*/}/repositories/${DOCR_REPOSITORY}")
        echo "Repository delete status: $DELETE_REPO_RESPONSE"

        echo "Triggering garbage collection..."
        GC_RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $DOCR_TOKEN" \
          "https://api.digitalocean.com/v2/registry/${DOCR_REGISTRY##*/}/garbage-collection")
        echo "Garbage collection trigger response:"
        echo "$GC_RESPONSE"

    - name: Build, Tag, and Push Docker Image
      env:
        DOCR_REGISTRY: ${{ vars.DOCR_REGISTRY }}
        DOCR_REPOSITORY: ${{ vars.DOCR_REPOSITORY }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
        COMMIT_HASH: ${{ env.COMMIT_HASH }}
      run: |
        IMAGE_TAG=${BRANCH_NAME}-${COMMIT_HASH}
        docker build -t $DOCR_REGISTRY/$DOCR_REPOSITORY:$IMAGE_TAG .
        docker push $DOCR_REGISTRY/$DOCR_REPOSITORY:$IMAGE_TAG

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass


    - name: Deploy on Droplet using sshpass
      env:
        DOCR_REGISTRY: ${{ vars.DOCR_REGISTRY }}
        DOCR_REPOSITORY: ${{ vars.DOCR_REPOSITORY }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
        COMMIT_HASH: ${{ env.COMMIT_HASH }}
        DOCR_TOKEN: ${{ secrets.DOCR_TOKEN }}
        HOST: ${{ secrets.DROPLET_HOST }}
        USER: ${{ secrets.DROPLET_USER }}
        PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
      run: |
        IMAGE_TAG=${BRANCH_NAME}-${COMMIT_HASH}

        echo "Copying docker-compose.yml to server..."
        sshpass -p "$PASSWORD" scp -o StrictHostKeyChecking=no docker-compose.yml ${USER}@${HOST}:~/docker-compose.yml

        echo "Running remote deployment commands..."
        sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no ${USER}@${HOST} 
        if ! command -v docker-compose > /dev/null; then
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.4/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        echo "$DOCR_TOKEN" | docker login -u doctl --password-stdin $DOCR_REGISTRY
        docker pull $DOCR_REGISTRY/$DOCR_REPOSITORY:$IMAGE_TAG
        sed -i 's|image: .*|image: '"$DOCR_REGISTRY"'/'"$DOCR_REPOSITORY"':'"$IMAGE_TAG"'|' docker-compose.yml
        docker-compose pull
        docker-compose down
        docker-compose up -d
        
